//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Player/Controlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controlls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""09b25f01-d7b3-4f74-8dd8-6c4800fd3ac8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""51a1d87e-40d4-4a38-988b-116f751366b0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6b1aa840-904d-4006-b2ed-d5d23477a4c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""2713376b-a8b3-4748-96aa-374f0e92b37b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gravityswitch"",
                    ""type"": ""Button"",
                    ""id"": ""8906d0d0-4050-4f3c-ae6b-eb34df3e657b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Whip"",
                    ""type"": ""Button"",
                    ""id"": ""e5cd0e15-bc67-4f21-838f-f6614aa4656f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Memorie"",
                    ""type"": ""Button"",
                    ""id"": ""a553f580-09e7-4128-b9ac-60804af7a479"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""64c59d65-d7cd-4a44-8c19-32d04800d251"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scoutmode"",
                    ""type"": ""Button"",
                    ""id"": ""b3f90b4b-68ce-47f0-9d49-0042a18181d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""a9b702c8-2bf0-45ab-aba2-028f925f0159"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controllermove"",
                    ""type"": ""Value"",
                    ""id"": ""a57218f5-1a58-4af0-ae96-0d5b5a73cf29"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Controllerjump"",
                    ""type"": ""Button"",
                    ""id"": ""141eeeee-370b-45c3-9b80-2ed7e2a67af5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controllerdash"",
                    ""type"": ""Button"",
                    ""id"": ""b48f0c5c-764a-4b19-938f-2c607646387f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controllergravityswitch"",
                    ""type"": ""Button"",
                    ""id"": ""0be2cf90-c622-4254-90ac-7806a5abfc21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controllerwhip"",
                    ""type"": ""Button"",
                    ""id"": ""e4940b0b-3558-4096-94f5-84e75bc434ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controllermemorie"",
                    ""type"": ""Button"",
                    ""id"": ""f1159c78-a7af-4e13-9082-6f69c54ee9bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controllerscoutmode"",
                    ""type"": ""Button"",
                    ""id"": ""77631135-f9d1-4b50-9bb3-013320e0c49d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controllerpause"",
                    ""type"": ""Button"",
                    ""id"": ""3c1335d3-2b81-4759-9e96-b6371245f2f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controlleresc"",
                    ""type"": ""Button"",
                    ""id"": ""3d4647e6-5052-4e54-b990-274034d0b6e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""00ca640b-d935-4593-8157-c05846ea39b3"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""7c4c8e84-ca2b-44ad-9e5c-36e40a596c60"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""957ac5a3-8743-4f29-9576-5d8939107bc2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""66642087-c10b-4302-876d-c91f67e921ad"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""b5034035-ac5b-4575-8745-5f32dbeb1114"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e26cdbed-2fca-4234-a7f4-af1c4c1f6f10"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcb59593-ff04-4b75-b43b-e80f7f967726"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd847526-d9eb-422b-b572-3a7a57cb7058"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gravityswitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f832a158-405d-41fb-b733-10ec66dffbd3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Whip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8d07136-6bf7-4385-9071-e878e6186641"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Memorie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e46d4b96-f0e0-4aef-aff8-7290d534f874"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b73cbea-a2a7-4989-b04e-553ef119bcfc"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scoutmode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0020a18-f3f4-4ae3-b185-7b3d41602c9a"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""90a63d5b-1d4d-4895-96a0-6ee9cca9971a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllermove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cdfe26d0-2e25-4132-9168-b1d63b829fe5"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllermove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ac295c5d-072c-41b2-b3f5-687aed96b448"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllermove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6d25c6c1-b3ba-439e-9272-e63e84f80390"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllermove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5d638131-15c2-4c1a-bc5b-dbdbd51d7eb0"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllermove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""86bf6ff2-aed9-4339-b36f-dec9db0289b0"",
                    ""path"": ""<HID::mayflash limited MAYFLASH GameCube Controller Adapter>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllerjump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97a82f27-32db-433f-8980-2f1bc59addc4"",
                    ""path"": ""<HID::mayflash limited MAYFLASH GameCube Controller Adapter>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllerdash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c372877a-47ed-4dd3-8e0b-f04351604193"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllergravityswitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a035044-c368-4d0a-ac98-851c9aee9bf6"",
                    ""path"": ""<HID::mayflash limited MAYFLASH GameCube Controller Adapter>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllerwhip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b734f8d0-1703-46ba-ac8a-ad711557cc58"",
                    ""path"": ""<HID::mayflash limited MAYFLASH GameCube Controller Adapter>/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllermemorie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b28a8037-d832-45cf-bcae-1e849e5af081"",
                    ""path"": ""<HID::mayflash limited MAYFLASH GameCube Controller Adapter>/button6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllerscoutmode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""494ebfe2-636d-42a9-8687-d003556618c6"",
                    ""path"": ""<HID::mayflash limited MAYFLASH GameCube Controller Adapter>/button8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controllerpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c3d3e4d-fe96-4bef-bfc9-fab606dc46b4"",
                    ""path"": ""<HID::mayflash limited MAYFLASH GameCube Controller Adapter>/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controlleresc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""37ff6e7e-246c-4001-86b1-4438043c7809"",
            ""actions"": [
                {
                    ""name"": ""Openmenu"",
                    ""type"": ""Button"",
                    ""id"": ""2a6625e7-c643-4221-af93-c9ef2f6f6db6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Screenshot"",
                    ""type"": ""Button"",
                    ""id"": ""b25ff5fb-a801-4aa4-8dc8-becc0aab137a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""807328c6-6393-43df-ae63-97cf5c7d92cd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Openmenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2da641d1-f315-4ff4-98d3-42b9ffc0561c"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Screenshot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_Gravityswitch = m_Player.FindAction("Gravityswitch", throwIfNotFound: true);
        m_Player_Whip = m_Player.FindAction("Whip", throwIfNotFound: true);
        m_Player_Memorie = m_Player.FindAction("Memorie", throwIfNotFound: true);
        m_Player_Esc = m_Player.FindAction("Esc", throwIfNotFound: true);
        m_Player_Scoutmode = m_Player.FindAction("Scoutmode", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        m_Player_Controllermove = m_Player.FindAction("Controllermove", throwIfNotFound: true);
        m_Player_Controllerjump = m_Player.FindAction("Controllerjump", throwIfNotFound: true);
        m_Player_Controllerdash = m_Player.FindAction("Controllerdash", throwIfNotFound: true);
        m_Player_Controllergravityswitch = m_Player.FindAction("Controllergravityswitch", throwIfNotFound: true);
        m_Player_Controllerwhip = m_Player.FindAction("Controllerwhip", throwIfNotFound: true);
        m_Player_Controllermemorie = m_Player.FindAction("Controllermemorie", throwIfNotFound: true);
        m_Player_Controllerscoutmode = m_Player.FindAction("Controllerscoutmode", throwIfNotFound: true);
        m_Player_Controllerpause = m_Player.FindAction("Controllerpause", throwIfNotFound: true);
        m_Player_Controlleresc = m_Player.FindAction("Controlleresc", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Openmenu = m_Menu.FindAction("Openmenu", throwIfNotFound: true);
        m_Menu_Screenshot = m_Menu.FindAction("Screenshot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_Gravityswitch;
    private readonly InputAction m_Player_Whip;
    private readonly InputAction m_Player_Memorie;
    private readonly InputAction m_Player_Esc;
    private readonly InputAction m_Player_Scoutmode;
    private readonly InputAction m_Player_Pause;
    private readonly InputAction m_Player_Controllermove;
    private readonly InputAction m_Player_Controllerjump;
    private readonly InputAction m_Player_Controllerdash;
    private readonly InputAction m_Player_Controllergravityswitch;
    private readonly InputAction m_Player_Controllerwhip;
    private readonly InputAction m_Player_Controllermemorie;
    private readonly InputAction m_Player_Controllerscoutmode;
    private readonly InputAction m_Player_Controllerpause;
    private readonly InputAction m_Player_Controlleresc;
    public struct PlayerActions
    {
        private @Controlls m_Wrapper;
        public PlayerActions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @Gravityswitch => m_Wrapper.m_Player_Gravityswitch;
        public InputAction @Whip => m_Wrapper.m_Player_Whip;
        public InputAction @Memorie => m_Wrapper.m_Player_Memorie;
        public InputAction @Esc => m_Wrapper.m_Player_Esc;
        public InputAction @Scoutmode => m_Wrapper.m_Player_Scoutmode;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputAction @Controllermove => m_Wrapper.m_Player_Controllermove;
        public InputAction @Controllerjump => m_Wrapper.m_Player_Controllerjump;
        public InputAction @Controllerdash => m_Wrapper.m_Player_Controllerdash;
        public InputAction @Controllergravityswitch => m_Wrapper.m_Player_Controllergravityswitch;
        public InputAction @Controllerwhip => m_Wrapper.m_Player_Controllerwhip;
        public InputAction @Controllermemorie => m_Wrapper.m_Player_Controllermemorie;
        public InputAction @Controllerscoutmode => m_Wrapper.m_Player_Controllerscoutmode;
        public InputAction @Controllerpause => m_Wrapper.m_Player_Controllerpause;
        public InputAction @Controlleresc => m_Wrapper.m_Player_Controlleresc;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Dash.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Gravityswitch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGravityswitch;
                @Gravityswitch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGravityswitch;
                @Gravityswitch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGravityswitch;
                @Whip.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWhip;
                @Whip.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWhip;
                @Whip.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWhip;
                @Memorie.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMemorie;
                @Memorie.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMemorie;
                @Memorie.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMemorie;
                @Esc.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEsc;
                @Esc.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEsc;
                @Esc.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEsc;
                @Scoutmode.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScoutmode;
                @Scoutmode.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScoutmode;
                @Scoutmode.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScoutmode;
                @Pause.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Controllermove.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllermove;
                @Controllermove.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllermove;
                @Controllermove.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllermove;
                @Controllerjump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerjump;
                @Controllerjump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerjump;
                @Controllerjump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerjump;
                @Controllerdash.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerdash;
                @Controllerdash.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerdash;
                @Controllerdash.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerdash;
                @Controllergravityswitch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllergravityswitch;
                @Controllergravityswitch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllergravityswitch;
                @Controllergravityswitch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllergravityswitch;
                @Controllerwhip.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerwhip;
                @Controllerwhip.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerwhip;
                @Controllerwhip.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerwhip;
                @Controllermemorie.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllermemorie;
                @Controllermemorie.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllermemorie;
                @Controllermemorie.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllermemorie;
                @Controllerscoutmode.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerscoutmode;
                @Controllerscoutmode.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerscoutmode;
                @Controllerscoutmode.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerscoutmode;
                @Controllerpause.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerpause;
                @Controllerpause.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerpause;
                @Controllerpause.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControllerpause;
                @Controlleresc.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControlleresc;
                @Controlleresc.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControlleresc;
                @Controlleresc.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnControlleresc;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Gravityswitch.started += instance.OnGravityswitch;
                @Gravityswitch.performed += instance.OnGravityswitch;
                @Gravityswitch.canceled += instance.OnGravityswitch;
                @Whip.started += instance.OnWhip;
                @Whip.performed += instance.OnWhip;
                @Whip.canceled += instance.OnWhip;
                @Memorie.started += instance.OnMemorie;
                @Memorie.performed += instance.OnMemorie;
                @Memorie.canceled += instance.OnMemorie;
                @Esc.started += instance.OnEsc;
                @Esc.performed += instance.OnEsc;
                @Esc.canceled += instance.OnEsc;
                @Scoutmode.started += instance.OnScoutmode;
                @Scoutmode.performed += instance.OnScoutmode;
                @Scoutmode.canceled += instance.OnScoutmode;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Controllermove.started += instance.OnControllermove;
                @Controllermove.performed += instance.OnControllermove;
                @Controllermove.canceled += instance.OnControllermove;
                @Controllerjump.started += instance.OnControllerjump;
                @Controllerjump.performed += instance.OnControllerjump;
                @Controllerjump.canceled += instance.OnControllerjump;
                @Controllerdash.started += instance.OnControllerdash;
                @Controllerdash.performed += instance.OnControllerdash;
                @Controllerdash.canceled += instance.OnControllerdash;
                @Controllergravityswitch.started += instance.OnControllergravityswitch;
                @Controllergravityswitch.performed += instance.OnControllergravityswitch;
                @Controllergravityswitch.canceled += instance.OnControllergravityswitch;
                @Controllerwhip.started += instance.OnControllerwhip;
                @Controllerwhip.performed += instance.OnControllerwhip;
                @Controllerwhip.canceled += instance.OnControllerwhip;
                @Controllermemorie.started += instance.OnControllermemorie;
                @Controllermemorie.performed += instance.OnControllermemorie;
                @Controllermemorie.canceled += instance.OnControllermemorie;
                @Controllerscoutmode.started += instance.OnControllerscoutmode;
                @Controllerscoutmode.performed += instance.OnControllerscoutmode;
                @Controllerscoutmode.canceled += instance.OnControllerscoutmode;
                @Controllerpause.started += instance.OnControllerpause;
                @Controllerpause.performed += instance.OnControllerpause;
                @Controllerpause.canceled += instance.OnControllerpause;
                @Controlleresc.started += instance.OnControlleresc;
                @Controlleresc.performed += instance.OnControlleresc;
                @Controlleresc.canceled += instance.OnControlleresc;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Openmenu;
    private readonly InputAction m_Menu_Screenshot;
    public struct MenuActions
    {
        private @Controlls m_Wrapper;
        public MenuActions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Openmenu => m_Wrapper.m_Menu_Openmenu;
        public InputAction @Screenshot => m_Wrapper.m_Menu_Screenshot;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Openmenu.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnOpenmenu;
                @Openmenu.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnOpenmenu;
                @Openmenu.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnOpenmenu;
                @Screenshot.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnScreenshot;
                @Screenshot.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnScreenshot;
                @Screenshot.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnScreenshot;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Openmenu.started += instance.OnOpenmenu;
                @Openmenu.performed += instance.OnOpenmenu;
                @Openmenu.canceled += instance.OnOpenmenu;
                @Screenshot.started += instance.OnScreenshot;
                @Screenshot.performed += instance.OnScreenshot;
                @Screenshot.canceled += instance.OnScreenshot;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnGravityswitch(InputAction.CallbackContext context);
        void OnWhip(InputAction.CallbackContext context);
        void OnMemorie(InputAction.CallbackContext context);
        void OnEsc(InputAction.CallbackContext context);
        void OnScoutmode(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnControllermove(InputAction.CallbackContext context);
        void OnControllerjump(InputAction.CallbackContext context);
        void OnControllerdash(InputAction.CallbackContext context);
        void OnControllergravityswitch(InputAction.CallbackContext context);
        void OnControllerwhip(InputAction.CallbackContext context);
        void OnControllermemorie(InputAction.CallbackContext context);
        void OnControllerscoutmode(InputAction.CallbackContext context);
        void OnControllerpause(InputAction.CallbackContext context);
        void OnControlleresc(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnOpenmenu(InputAction.CallbackContext context);
        void OnScreenshot(InputAction.CallbackContext context);
    }
}
